<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.hmh</groupId>
    <artifactId>treasure-chest</artifactId>
    <name>${project.artifactId}</name>
    <packaging>pom</packaging>
    <version>1.0.1</version>
    <!--项目地址-->
    <url>https://github.com/sihe7/treasure-chest</url>
    <!--描述-->
    <description>一套乱七八糟的仓库</description>
    <!--正式放入码云管理-->
    <modules>
        <module>treasure-chest-framework</module>
        <module>treasure-chest-model-basic</module>
        <module>treasure-chest-model-test</module>
        <module>drug-management-system</module>
        <module>design-pattern</module>
        <module>java-basics</module>
    </modules>
    <!--由最外层做统一管理-->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <!--hmh.version-->
        <hmh.version>1.0.1</hmh.version>
        <!--spring-cloud版本-->
        <spring-cloud.version>Hoxton.SR9</spring-cloud.version>
        <!--spring-cloud-alibaba版本-->
        <spring-cloud-alibaba.version>2.2.5.RC2</spring-cloud-alibaba.version>
        <!--rabbit版本-->
        <stream-rabbit.version>3.1.0</stream-rabbit.version>
        <!--spring-boot版本-->
        <spring.boot.version>2.3.2.RELEASE</spring.boot.version>
        <!--spring-boot-starter-test版本-->
        <spring-boot-starter-test.version>2.6.3</spring-boot-starter-test.version>
        <!--spring-boot-starter-web版本-->
        <spring-boot-starter-web.version>2.6.6</spring-boot-starter-web.version>
        <!--mybatis-plus版本-->
        <mybatis-plus-boot-starter.version>3.4.0</mybatis-plus-boot-starter.version>
        <!--druid的springboot版本配置-->
        <druid-spring-boot-starter>1.1.20</druid-spring-boot-starter>
        <!--druid版本配置-->
        <druid.version>1.1.22</druid.version>
        <!--knife4j版本支持-->
        <knife4j.version>2.0.5</knife4j.version>
        <!--orika 拷贝工具 -->
        <orika-core.version>1.5.4</orika-core.version>
        <!--lang3-->
        <commons.lang3.version>3.8.1</commons.lang3.version>
        <!--kryo-->
        <kryo.version>4.0.2</kryo.version>
        <!--阿里支付-->
        <alipay.easysdk.version>2.2.0</alipay.easysdk.version>
        <!--guava版本 -->
        <guava.version>20.0</guava.version>
        <!--jwt版本-->
        <jwt.version>3.8.1</jwt.version>
        <!--jjwt版本-->
        <jjwt.version>0.9.1</jjwt.version>
        <!--fastjson版本-->
        <fastjson.version>1.2.73</fastjson.version>
        <!--sharding-jdbc版本-->
        <sharding-jdbc.version>4.1.1</sharding-jdbc.version>
        <!--redisson版本-->
        <redisson-spring-boot>3.11.2</redisson-spring-boot>
        <!--seata-spring-boot-starter版本-->
        <seata-spring-boot-starter.version>1.3.0</seata-spring-boot-starter.version>
        <!--hessian协议支持-->
        <hessian.version>4.0.7</hessian.version>
        <!--xxl-job-->
        <xxl-job-core.version>2.1.2</xxl-job-core.version>
        <!--joda-time.version-->
        <joda-time.version>2.9.9</joda-time.version>
        <!--lombok.version-->
        <lombok.version>1.18.22</lombok.version>
        <slf4j.version>1.7.7</slf4j.version>
    </properties>
    <!--声明jar-->
    <!--Maven中的dependencyManagement元素提供了一种管理依赖版本号的方式。
    在dependencyManagement元素中声明所依赖的jar包的版本号等信息，
    那么所有子项目再次引入此依赖jar包时则无需显式的列出版本号。
    Maven会沿着父子层级向上寻找拥有dependencyManagement 元素的项目，
    然后使用它指定的版本号。-->
    <dependencyManagement>
        <dependencies>
            <!--本项目jar版本管理-->
            <dependency>
                <groupId>com.hmh</groupId>
                <artifactId>framework-commons</artifactId>
                <version>${hmh.version}</version>
            </dependency>

            <!--springcould主配置-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!---spring-cloud-alibaba主配置-->
            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-alibaba-dependencies</artifactId>
                <version>${spring-cloud-alibaba.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <dependency>
                <groupId>com.alibaba.cloud</groupId>
                <artifactId>spring-cloud-starter-alicloud-oss</artifactId>
                <version>2.1.1.RELEASE</version>
            </dependency>

            <!---springboot主配置-->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring.boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- sharding-jdbc -->
            <dependency>
                <groupId>org.apache.shardingsphere</groupId>
                <artifactId>sharding-jdbc-spring-boot-starter</artifactId>
                <version>${sharding-jdbc.version}</version>
            </dependency>

            <!-- 使用XA事务时，需要引入此模块 -->
            <dependency>
                <groupId>org.apache.shardingsphere</groupId>
                <artifactId>sharding-transaction-xa-core</artifactId>
                <version>${sharding-jdbc.version}</version>
            </dependency>

            <!-- 拷贝对象 -->
            <dependency>
                <groupId>ma.glasnost.orika</groupId>
                <artifactId>orika-core</artifactId>
                <version>${orika-core.version}</version>
            </dependency>

            <!--工具包-->
            <dependency>
                <groupId>org.apache.commons</groupId>
                <artifactId>commons-lang3</artifactId>
                <version>${commons.lang3.version}</version>
            </dependency>

            <!--fastjson-->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>

            <!--knife4j版接口文档 访问/doc.html -->
            <dependency>
                <groupId>com.github.xiaoymin</groupId>
                <artifactId>knife4j-spring-boot-starter</artifactId>
                <version>${knife4j.version}</version>
            </dependency>

            <!--druid的springboot配置-->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>${druid-spring-boot-starter}</version>
            </dependency>

            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid</artifactId>
                <version>${druid.version}</version>
            </dependency>

            <!--springboot关于mybatis-plus-->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis-plus-boot-starter.version}</version>
            </dependency>

            <!--代码生成器模板引擎 相关依赖-->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-generator</artifactId>
                <version>${mybatis-plus-boot-starter.version}</version>
            </dependency>

            <!--对象序列化-->
            <dependency>
                <groupId>com.esotericsoftware</groupId>
                <artifactId>kryo</artifactId>
                <version>${kryo.version}</version>
            </dependency>

            <!-- 阿里easy支付 -->
            <dependency>
                <groupId>com.alipay.sdk</groupId>
                <artifactId>alipay-easysdk</artifactId>
                <version>${alipay.easysdk.version}</version>
            </dependency>

            <!--guava工具包-->
            <dependency>
                <groupId>com.google.guava</groupId>
                <artifactId>guava</artifactId>
                <version>${guava.version}</version>
            </dependency>

            <!--JWT-->
            <dependency>
                <groupId>com.auth0</groupId>
                <artifactId>java-jwt</artifactId>
                <version>${jwt.version}</version>
            </dependency>

            <dependency>
                <groupId>io.jsonwebtoken</groupId>
                <artifactId>jjwt</artifactId>
                <version>${jjwt.version}</version>
            </dependency>

            <!--redis缓存客户端-->
            <dependency>
                <groupId>org.redisson</groupId>
                <artifactId>redisson-spring-boot-starter</artifactId>
                <version>${redisson-spring-boot}</version>
            </dependency>

            <!-- xxl-job-core -->
            <dependency>
                <groupId>com.xuxueli</groupId>
                <artifactId>xxl-job-core</artifactId>
                <version>${xxl-job-core.version}</version>
            </dependency>

            <!--r分布式事务配置-->
            <dependency>
                <groupId>io.seata</groupId>
                <artifactId>seata-spring-boot-starter</artifactId>
                <version>${seata-spring-boot-starter.version}</version>
            </dependency>

            <!-- sharding-jdbc -->
            <dependency>
                <groupId>org.apache.shardingsphere</groupId>
                <artifactId>sharding-jdbc-spring-boot-starter</artifactId>
                <version>${sharding-jdbc.version}</version>
            </dependency>

            <!-- 使用BASE事务时，需要引入此模块 -->
            <dependency>
                <groupId>org.apache.shardingsphere</groupId>
                <artifactId>sharding-transaction-base-seata-at</artifactId>
                <version>${sharding-jdbc.version}</version>
            </dependency>

            <!--使用hessian协议-->
            <dependency>
                <groupId>com.caucho</groupId>
                <artifactId>hessian</artifactId>
                <version>${hessian.version}</version>
            </dependency>

            <!--rabbit-->
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-starter-stream-rabbit</artifactId>
                <version>${stream-rabbit.version}</version>
            </dependency>
            <!-- spring-boot-starter-test -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-test</artifactId>
                <version>${spring-boot-starter-test.version}</version>
                <scope>test</scope>
            </dependency>
            <!-- spring-boot-starter-web -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter-web</artifactId>
                <version>${spring-boot-starter-web.version}</version>
            </dependency>
            <!-- joda-time时间 -->
            <dependency>
                <groupId>joda-time</groupId>
                <artifactId>joda-time</artifactId>
                <version>${joda-time.version}</version>
            </dependency>
            <!-- lombok -->
            <!--产生的原因是：tomcat中也有servlet-api包，这样，发生了冲突解决方法：
            添加<scope>provided</scope>，因为provided表明该包只在编译和测试的时候用，
            所以，当启动tomcat的时候，就不会冲突了-->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
                <scope>provided</scope>
            </dependency>
            <dependency>
                <groupId>org.slf4j</groupId>
                <artifactId>jcl-over-slf4j</artifactId>
                <version>${slf4j.version}</version>
            </dependency>


        </dependencies>
    </dependencyManagement>
    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.1</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>